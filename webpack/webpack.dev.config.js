const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const base = require('./webpack.base.config');

const getConfig = (moduleName, port) => ({
  context: path.resolve(__dirname, '../'),
  devtool: 'eval-source-map',
  entry: {
    hot: [
      // bundle the client for webpack-dev-server
      // and connect to the provided endpoint
      `webpack-dev-server/client?http://localhost:${port}`,
      // activate HMR for React
      'webpack/hot/dev-server',
      'react-hot-loader/patch',
      // bundle the client for hot reloading
      // only- means to only hot reload for successful updates
    ],
    main: [
      // the entry point of our app
      './core/index.js',
    ],
    BBAttachComponentScripts: [
      './injectScripts.js',
    ],
  },
  mode: 'development',
  output: {
    path: `${__dirname}/__build__${moduleName || ''}`,
    filename: '[name].[hash].js',
    chunkFilename: '[name].[hash].chunk.js',
    publicPath: '/',
    globalObject: 'this',
  },
  target: 'web',
  cache: true,
  module: base,
  resolve: {
    unsafeCache: true,
    extensions: ['.js'],
    alias: {
     core: path.resolve(__dirname, '../core/index')
      // BBUtils: path.resolve(__dirname, '../commons/src/index.utils'),
      // BBConstants: path.resolve(__dirname, '../commons/src/index.constants'),
      // BBActions: path.resolve(__dirname, '../commons/src/index.actions'),
      // BBComponents: path.resolve(__dirname, '../commons/src/index.components'),
      // BBCoreComponents: path.resolve(__dirname, '../core/src/components'),
      // BBContainers: path.resolve(__dirname, '../commons/src/index.containers'),
      // BBReducers: path.resolve(__dirname, '../commons/src/index.reducers'),
    },
    modules: [
      'node_modules',
      path.join(__dirname, '../core'),
    ],
  },
  plugins: [
    {
      apply: (compiler) => {
        compiler.hooks.done.tap('Progress', (compilation) => {
          console.log(`\n Compilation took ${((compilation.endTime - compilation.startTime) / 1000)} s`);
        });
      },
    },
    new webpack.HotModuleReplacementPlugin(),
    new webpack.SourceMapDevToolPlugin(),
    // new webpack.NamedModulesPlugin(),
    //    new webpack.ContextReplacementPlugin(
    //      /.*lib/,
    //      "../../../../../lib/",
    //      true,
    //      /^\.\/.*.src.*\..*js/
    //    ),
    new MiniCssExtractPlugin({
      filename: '[name].[hash].css',
      chunkFilename: '[id].[hash].css',
    }),
    new webpack.DefinePlugin({
      'process.env': {
        NO_AUTH: process.env.NO_AUTH ? process.env.NO_AUTH : false,
        NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'development'),
        APP_PLATFORM: JSON.stringify(process.env.APP_PLATFORM || 'ide'),
      },
    }),
    new HtmlWebpackPlugin({
      template: 'index.dev.html',
      inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
    }),
    // new CopyWebpackPlugin([
    //   { from: 'core/src/images/favicon.png', to: 'favicon.png' },
    // ], { copyUnmodified: true }),
  ],
  externals: {
    'css-loader': 'css-loader',
    cheerio: 'window',
    'react/addons': true,
    'react/lib/ExecutionEnvironment': true,
    'react/lib/ReactContext': true,
  },
});

module.exports = getConfig;
